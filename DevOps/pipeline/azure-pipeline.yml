name: $(BuildDefinitionName)_tag-$(BuildID)_at-$(Date:yyyyMMdd)$(Rev:.r)
resources:
  repositories:
    - repository: devopsTemplates
      type: github
      endpoint: DfE-Digital
      name: DFE-Digital/login.dfe.devops.pipelines
    - repository: config
      type: github
      endpoint: DfE-Digital
      name: DFE-Digital/login.dfe.config
      ref: master

trigger:
  branches:
    include:
    - master
    - develop
    - release/*
    #- feature/*

variables:
- group: platform-global
- group: code-scan-tools
- name: applicationShortName
  value: 'hlp'
- name: applicationFullName
  value: 'help'
# - name: environmentName
#   - ${{ if eq(parameters.gitVersioning, true) }}:
#     value: 

stages:
# Check What Folder/files changes to trigger the correspondent stages
pws: |
    Write-Host "##vso[task.setvariable variable=InfrDeploy;isOutput=true]False"
    Write-Host "##vso[task.setvariable variable=AppDeploy;isOutput=true]False"
    $editedFiles = git diff HEAD HEAD~ --name-only
    Write-Output "Infr Value: $($env:InfrDeploy)"
    Write-Output "App Value: $($env:AppDeploy)"
    $editedFiles | ForEach-Object {
        Write-Output $_
        Switch -Wildcard ($_ ) {
            'DevOps/*' { Write-Host "##vso[task.setvariable variable=InfrDeploy;isOutput=true]True"}
            'src/*' { Write-Host "##vso[task.setvariable variable=AppDeploy;isOutput=true]True"  }
            'test/*' { Write-Host "##vso[task.setvariable variable=AppDeploy;isOutput=true]True"}
            'package*' { Write-Host "##vso[task.setvariable variable=AppDeploy;isOutput=true]True"}
            # The rest of your path filters
        }

    }

    Write-Output "Infr Value: $($env:InfrDeploy)"
    Write-Output "App Value: $($env:AppDeploy)"

# Code scaning tools 
#- template: ./scan-tools.yml

#Build the artifact for deployment
- stage: buildApp
  displayName: "Package application"
  condition: eq(variables['AppDeploy'], 'true')
  #dependsOn: scanTools
  jobs:
  - template: ./build.yml
    parameters:
      applicationName: ${{variables.applicationFullName}}
      custRegAuth: $(custRegAuth)
      artifactName: "${{variables.applicationShortName}}-dev-$(Build.BuildId)-release"
      environmentName: dev
      pm2ProcessFileName: process.json
      variableGroups:
        - platform-dev
        - platform-dev-secured
        - platform-standalone-custom-hosts

- stage: DeployApp
  dependsOn: buildApp
  displayName: "Deploy application"
  condition: and(eq(variables['AppDeploy'], 'true'),eq(variables['InfrDeploy'], 'False'))
  jobs:
  - template: ./deploy.yml
    parameters:
      serviceConnection: "$(devServiceConnection)"
      environmentName: dev
      environmentId: d01
      subscriptionId: $(devSubscriptionId)
      applicationName: ${{variables.applicationShortName}}
      releaseArtifactName: ${{variables.applicationShortName}}-dev-$(Build.BuildId)-release

- stage: DeployInfr
  condition: eq(variables['InfrDeploy'], 'true')
  displayName: "Deploy Infrastructure"
  jobs:
  - template: ./infrastructure.yml
    parameters:
      serviceConnection: "$(devServiceConnection)"
      environmentName: dev
      environmentId: d01
      subscriptionId: $(devSubscriptionId)
      applicationShortName: ${{variables.applicationShortName}}
      applicationFullName: ${{variables.applicationFullName}}
      releaseArtifactName: ${{variables.applicationShortName}}-dev-$(Build.BuildId)-release
      certificateName: non-prod-gateway
      variableGroups:
        - platform-dev
        - platform-dev-secured
        - platform-standalone-custom-hosts


      # stageName: publishDevInstances
      # 
      # resourceGroupSuffix: "${{parameters.resourceGroupSuffix}}"
      # environmentName: dev
      # environmentId: d01
      # deploymentDependencyName: deployDev
      # accessRestricted: "${{parameters.restrictToGateway}}"
      # gatewayFrontEndHostName: ""