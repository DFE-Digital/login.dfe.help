name: $(BuildDefinitionName)_tag-$(BuildID)_at-$(Date:yyyyMMdd)$(Rev:.r)
resources:
  repositories:
    - repository: devopsTemplates
      type: github
      endpoint: DfE-Digital
      name: DFE-Digital/login.dfe.devops
    - repository: config
      type: github
      endpoint: DfE-Digital
      name: DFE-Digital/login.dfe.config
      ref: master

trigger:
  branches:
    include:
    - master
    - develop
    - release/*
    #- feature/*

variables:
- group: platform-global
- group: code-scan-tools
- name: applicationShortName
  value: 'hlp'
- name: applicationFullName
  value: 'help'
# - name: environmentName
#   - ${{ if eq(parameters.gitVersioning, true) }}:
#     value: 

stages:
# Check What Folder/files changes to trigger the correspondent stages
- stage: FilesChanges
  displayName: "Files Changes"
  jobs:
  - job: filesCheckStatus
    steps:
    - task: PowerShell@2
      displayName: Files Check
      name: filesCheck
      inputs:
        targetType: 'inline'
        pwsh: true
        script: |
          $Check= "true"
          $editedFiles = git diff HEAD HEAD~ --name-only
          $editedFiles | ForEach-Object {
              Write-Output $_
              Switch -Wildcard ($_ ) {
                  'DevOps/*' { Write-Host "##vso[task.setvariable variable=InfrDeploy;isOutput=true]$Check" }
                  'src/*' { Write-Host "##vso[task.setvariable variable=AppDeploy;isOutput=true]$Check"  }
                  'test/*' { Write-Host "##vso[task.setvariable variable=AppDeploy;isOutput=true]$Check" }
                  '*package*' { Write-Host "##vso[task.setvariable variable=AppDeploy;isOutput=true]$Check" }
                  # The rest of your path filters
              }

          }

# Code scaning tools 
#- template: ./scan-tools.yml

#Build the artifact for deployment
- stage: buildApp
  displayName: "Package application"
  condition: eq(dependencies.FilesChanges.outputs['filesCheckStatus.filesCheck.AppDeploy'], 'true')
  #dependsOn: scanTools
  jobs:
  - template: ./build.yml
    parameters:
      applicationName: ${{variables.applicationFullName}}
      custRegAuth: $(custRegAuth)
      artifactName: "${{variables.applicationShortName}}-dev-$(Build.BuildId)-release"
      environmentName: dev
      pm2ProcessFileName: process.json
      variableGroups:
        - platform-dev
        - platform-dev-secured
        - platform-standalone-custom-hosts

- stage: DeployApp
  dependsOn: buildApp
  displayName: "Deploy application"
  condition: and(eq(dependencies.FilesChanges.outputs['filesCheckStatus.filesCheck.AppDeploy'], 'true'),eq(dependencies.FilesChanges.outputs['filesCheckStatus.filesCheck.InfrDeploy'], ''))
  jobs:
  - template: ./deploy.yml
    parameters:
      serviceConnection: "$(devServiceConnection)"
      environmentName: dev
      environmentId: d01
      subscriptionId: $(devSubscriptionId)
      applicationName: ${{variables.applicationShortName}}
      releaseArtifactName: ${{variables.applicationShortName}}-dev-$(Build.BuildId)-release

- stage: DeployInfr
  displayName: "Deploy Infrastructure"
  condition: eq(dependencies.FilesChanges.outputs['filesCheckStatus.filesCheck.InfrDeploy'], 'true')
  variables: 
    InfrDeploy: $( stageDependencies.FilesChanges.filesCheckStatus.outputs['filesCheck.InfrDeploy'] )
    AAtest: $( dependencies.FilesChanges.outputs['filesCheckStatus.filesCheck.InfrDeploy'] )
  jobs:
  - template: ./infrastructure.yml
    parameters:
      serviceConnection: "$(devServiceConnection)"
      environmentName: dev
      environmentId: d01
      subscriptionId: $(devSubscriptionId)
      applicationShortName: ${{variables.applicationShortName}}
      applicationFullName: ${{variables.applicationFullName}}
      releaseArtifactName: ${{variables.applicationShortName}}-dev-$(Build.BuildId)-release
      certificateName: non-prod-gateway
      variableGroups:
        - platform-dev
        - platform-dev-secured
        - platform-standalone-custom-hosts
