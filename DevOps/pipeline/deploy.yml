parameters:
- name: serviceConnection
  type: string
- name: subscriptionId
  type: string
- name: environmentId
  type: string
- name: environmentName
  type: string
- name: deploymentLocation
  type: string
  default: westeurope
- name: applicationFullName
  type: string
- name: applicationShortName
  type: string
- name: releaseArtifactName
  type: string
- name: slotName
  type: string
  default: staging
- name: runtimeStack
  type: string
  default: NODE|14-lts
  values:
  - NODE|10-lts
  - NODE|10.10
  - NODE|10.12
  - NODE|10.14
  - NODE|10.16
  - NODE|12.9
  - NODE|12-lts
  - NODE|14-lts
- name: startupCommand
  type: string
  default: 'pm2 start /home/site/wwwroot/process.json --no-daemon'
- name: agentImage
  type: string
  default: windows-latest
  values:
  - windows-latest
  - windows-2019
  - vs2017-win2016
  - ubuntu-latest
  - ubuntu-18.04
  - ubuntu-16.04
  - macOS-latest
  - macOS-10.15
  - macOS-10.14
# - name: variableGroups
#   type: object
- name: stage
  type: string

jobs:
- deployment: 'deploy_${{parameters.environmentName}}_${{parameters.stage}}'
  displayName: 'Deploy [${{parameters.environmentName}}_${{parameters.stage}}]'
  environment: '${{parameters.environmentName}}'
  pool:
    vmImage: ubuntu-latest
  variables:
  # - '${{ each variableGroup in parameters.variableGroups }}':
  #   - group: ${{variableGroup}}
  - name: applicationBaseName
    value: '$(platformGlobalIdentifier)${{parameters.environmentId}}-$(platformGlobalName)-${{parameters.applicationShortName}}'
  - name: applicationResourceGroupName
    value: '$(platformGlobalIdentifier)${{parameters.environmentId}}-${{parameters.applicationShortName}}'
  - name: healthCheckUrl
    value: 'https://$(applicationBaseName)-${{parameters.slotName}}.azurewebsites.net'
  - name: healthCheckUrlApp
    value: 'https://$(applicationBaseName).azurewebsites.net'

  strategy:
    runOnce:
      deploy:
        steps:
        - checkout: self
        - ${{ if eq(variables['AppDeploy'], 'true') }}:
          
          - task: AzureCLI@2
            displayName: Slot Creation
            inputs:
              azureSubscription: '${{parameters.serviceConnection}}'
              condition: and(succeeded(), eq(variables['AppDeploy'], 'true'))
              scriptType: 'pscore'
              scriptLocation: 'scriptPath'
              scriptPath: 'DevOps/scripts/slotCreation.ps1'
              arguments: '-applicationName $(applicationBaseName) -slotName ${{parameters.slotName}} -rg $(applicationResourceGroupName)'
              workingDirectory: $(System.DefaultWorkingDirectory)


          - task: AzureRmWebAppDeployment@4
            displayName: Deploy Azure App Service ${{parameters.applicationFullName}}
            condition: and(succeeded(), eq(variables['AppDeploy'], 'true'))
            inputs:
              azureSubscription: '${{parameters.serviceConnection}}'
              appType: webAppLinux
              WebAppName: $(applicationBaseName)
              deployToSlotOrASE: true
              ResourceGroupName: $(applicationResourceGroupName)
              SlotName: '${{parameters.slotName}}'
              packageForLinux: '$(Pipeline.Workspace)/${{parameters.releaseArtifactName}}/${{parameters.releaseArtifactName}}.zip'
              RuntimeStack: '${{parameters.runtimeStack}}'
              WebConfigParameters: '-Handler iisnode -NodeStartFile $(platformGlobalNodeStart) -appType node'
              enableCustomDeployment: true
              TakeAppOfflineFlag: false
              RemoveAdditionalFilesFlag: true
              ExcludeFilesFromAppDataFlag: false
              StartupCommand: '${{parameters.startupCommand}}'

          - task: PowerShell@2
            displayName: 'Healthcheck [$(healthCheckUrl)/healthcheck]'
            condition: and(succeeded(), eq(variables['AppDeploy'], 'true'))
            inputs:
              filePath: 'DevOps/scripts/healthCheck.ps1'
              arguments: '-testUrl $(healthCheckUrl) -healthCheckEndpoint healthcheck'
              pwsh: true
              workingDirectory: $(System.DefaultWorkingDirectory)

          - task: AzureAppServiceManage@0
            displayName: Swap Slots
            condition: and(succeeded(), eq(variables['AppDeploy'], 'true'))
            inputs:
              azureSubscription: '${{parameters.serviceConnection}}'
              WebAppName: $(applicationBaseName)
              ResourceGroupName: $(applicationResourceGroupName)
              SourceSlot: '${{parameters.slotName}}'

          - task: PowerShell@2
            displayName: 'Healthcheck [$(healthCheckUrlApp)/healthcheck]'
            inputs:
              filePath: 'DevOps/scripts/healthCheck.ps1'
              arguments: '-testUrl $(healthCheckUrlApp) -healthCheckEndpoint healthcheck'
              pwsh: true
              workingDirectory: $(System.DefaultWorkingDirectory)

          - task: AzureAppServiceManage@0
            displayName: Delete staging slot
            condition: and(succeeded(), eq(variables['AppDeploy'], 'true'))
            inputs:
              azureSubscription: '${{parameters.serviceConnection}}'
              Action: Delete Slot
              WebAppName: $(applicationBaseName)
              ResourceGroupName: $(applicationResourceGroupName)
              slot: '${{parameters.slotName}}'