parameters:
- name: serviceConnection
  type: string
- name: subscriptionId
  type: string
- name: environmentId
  type: string
- name: environmentName
  type: string
- name: deploymentLocation
  type: string
  default: westeurope
- name: applicationFullName
  type: string
- name: applicationShortName
  type: string
- name: certificateName
  type: string
- name: releaseArtifactName
  type: string
- name: slotName
  type: string
  default: staging
- name: runtimeStack
  type: string
  default: NODE|14-lts
  values:
  - NODE|10-lts
  - NODE|10.10
  - NODE|10.12
  - NODE|10.14
  - NODE|10.16
  - NODE|12.9
  - NODE|12-lts
  - NODE|14-lts
- name: startupCommand
  type: string
  default: 'pm2 start /home/site/wwwroot/process.json --no-daemon'
- name: agentImage
  type: string
  default: windows-latest
  values:
  - windows-latest
  - windows-2019
  - vs2017-win2016
  - ubuntu-latest
  - ubuntu-18.04
  - ubuntu-16.04
  - macOS-latest
  - macOS-10.15
  - macOS-10.14
- name: variableGroups
  type: object

jobs:
- deployment: 'deploy_${{parameters.environmentName}}'
  displayName: 'Deploy [${{parameters.environmentName}}]'
  environment: '${{parameters.environmentName}}'
  pool:
    vmImage: ubuntu-latest
  variables:
  - '${{ each variableGroup in parameters.variableGroups }}':
    - group: ${{variableGroup}}
  - name: applicationBaseName
    value: '$(platformGlobalIdentifier)${{parameters.environmentId}}-$(platformGlobalName)-${{parameters.applicationShortName}}'
  - name: applicationResourceGroupName
    value: '$(platformGlobalIdentifier)${{parameters.environmentId}}-${{parameters.applicationShortName}}'
  - name: appServiceConfigPath
    value: './config/login.dfe.${{parameters.applicationFullName}}.${{parameters.environmentName}}.json'
  - name: healthCheckUrl
    value: 'https://$(applicationBaseName)-${{parameters.slotName}}.azurewebsites.net'
  - name: sharedResourceGroupName
    value: '$(platformGlobalIdentifier)${{parameters.environmentId}}-$(platformGlobalSharedResourceGroupNameIdentifier)'
  - name: globalResourceGroupName
    value: '$(platformGlobalIdentifier)${{parameters.environmentId}}-$(platformGlobalName)-global'
  - name: globalKeyVaultName
    value: '$(platformGlobalIdentifier)${{parameters.environmentId}}-$(platformGlobalName)-global-kv'
  - name: sharedVirtualNetworkName
    value: '$(platformGlobalIdentifier)${{parameters.environmentId}}-$(platformGlobalName)-shd-vnet'
  - name: healthCheckUrlApp
    value: 'https://$(applicationBaseName).azurewebsites.net'
  - name: overrideParameters
    value: '-appServiceName "$(applicationBaseName)" 
      -appServicePlanName "$(applicationBaseName)-asp" 
      -appServiceConfigPath "$(appServiceConfigPath)" 
      -appServicePlanRG "$(applicationResourceGroupName)" 
      -minTlsVersion "$(platformGlobalMinTlsVersion)"
      -certificateName ${{parameters.certificateName}} 
      -appServicePlanSku $(appServiceSku) 
      -numberOfWorkers $(numberOfWorkers) 
      -keyVaultName $(globalKeyVaultName) 
      -keyVaultResourceGroup $(globalResourceGroupName) 
      -auditServiceBusConnectionString "$(sharedServiceBusConnectionString)" 
      -auditServiceBusTopicName "$(auditServiceBusTopicName)" 
      -auditServiceBusSubscriptionName "$(auditServiceBusSubscriptionName)" 
      -virtualNetworkResourceGroupName "$(sharedResourceGroupName)" 
      -virtualNetworkName "$(sharedVirtualNetworkName)" 
      -enablePrivateEndpoint "false"'

  strategy:
    runOnce:
      deploy:
        steps:
        - task: PowerShell@2
          displayName: Read variables 0
          inputs:
            targetType: 'inline'
            pwsh: true
            script: |
              Write-Host "env:EnvVariable : $($env:ENVVARIABLE)"

              Write-Host "ENV:EnvVariable : $($ENV:ENVVARIABLE)"

              Write-Output "env:EnvVariable : $($env:ENVVARIABLE)"

              Write-Output "ENV:EnvVariable : $($ENV:ENVVARIABLE)"

              Write-Output "ENV:InfrDeploy : $($ENV:INFRDEPLOY)"
              Write-Output "ENV:AppDeploy : $($env:APPDEPLOY)"
              Get-ChildItem -Path Env:\ | Format-List
        - checkout: self
        # - task: AzureResourceManagerTemplateDeployment@3
        #   displayName: Create infrastructure
        #   inputs:
        #     deploymentScope: 'Resource Group'
        #     azureResourceManagerConnection: ${{parameters.serviceConnection}}
        #     subscriptionId: ${{parameters.subscriptionId}}
        #     action: 'Create Or Update Resource Group'
        #     resourceGroupName: $(applicationResourceGroupName)
        #     location: ${{parameters.deploymentLocation}}
        #     csmFile: $(System.DefaultWorkingDirectory)/DevOps/templates/template.json
        #     overrideParameters: $(overrideParameters)
        #     deploymentMode: 'Incremental'
        #     deploymentOutputs: armOutput
        #     nodeVersion: '${{parameters.runtimeStack}}'

        # - task: AzureRmWebAppDeployment@4
        #   displayName: Deploy Azure App Service ${{parameters.applicationFullName}}
        #   condition: eq(variables['AppDeploy'], 'true')
        #   inputs:
        #     azureSubscription: '${{parameters.serviceConnection}}'
        #     appType: webAppLinux
        #     WebAppName: $(applicationBaseName)
        #     deployToSlotOrASE: true
        #     ResourceGroupName: $(applicationResourceGroupName)
        #     SlotName: '${{parameters.slotName}}'
        #     packageForLinux: '$(Pipeline.Workspace)/${{parameters.releaseArtifactName}}/${{parameters.releaseArtifactName}}.zip'
        #     RuntimeStack: '${{parameters.runtimeStack}}'
        #     WebConfigParameters: '-Handler iisnode -NodeStartFile $(platformGlobalNodeStart) -appType node'
        #     enableCustomDeployment: true
        #     TakeAppOfflineFlag: false
        #     RemoveAdditionalFilesFlag: true
        #     ExcludeFilesFromAppDataFlag: false
        #     StartupCommand: '${{parameters.startupCommand}}'

        # - task: PowerShell@2
        #   displayName: 'Healthcheck [$(healthCheckUrl)/healthcheck]'
        #   condition: eq(variables['AppDeploy'], 'true')
        #   inputs:
        #     filePath: 'DevOps/scripts/healthCheck.ps1'
        #     arguments: '-testUrl $(healthCheckUrl) -healthCheckEndpoint healthcheck'
        #     pwsh: true
        #     workingDirectory: $(System.DefaultWorkingDirectory)

        # - task: AzureAppServiceManage@0
        #   displayName: Swap Slots
        #   condition: eq(variables['AppDeploy'], 'true')
        #   inputs:
        #     azureSubscription: '${{parameters.serviceConnection}}'
        #     WebAppName: $(applicationBaseName)
        #     ResourceGroupName: $(applicationResourceGroupName)
        #     SourceSlot: '${{parameters.slotName}}'

        # - task: PowerShell@2
        #   displayName: 'Healthcheck [$(healthCheckUrlApp)/healthcheck]'
        #   inputs:
        #     filePath: 'DevOps/scripts/healthCheck.ps1'
        #     arguments: '-testUrl $(healthCheckUrlApp) -healthCheckEndpoint healthcheck'
        #     pwsh: true
        #     workingDirectory: $(System.DefaultWorkingDirectory)

        # - task: AzureAppServiceManage@0
        #   displayName: Delete staging slot
        #   condition: eq(variables['AppDeploy'], 'true')
        #   inputs:
        #     azureSubscription: '${{parameters.serviceConnection}}'
        #     Action: Delete Slot
        #     WebAppName: $(applicationBaseName)
        #     ResourceGroupName: $(applicationResourceGroupName)
        #     slot: '${{parameters.slotName}}'