parameters:
- name: applicationName
  type: string
- name: applicationFullName
  type: string
- name: custRegAuth
  type: string
- name:  artifactName
  type: string
# - name: additionalFoldersForBuild
#   type: object
- name: environmentName
  type: string
- name: pm2ProcessFileName
  type: string
- name: agentImage
  type: string
  default: windows-latest
  values:
  - windows-latest
  - windows-2019
  - vs2017-win2016
  - ubuntu-latest
  - ubuntu-18.04
  - ubuntu-16.04
  - macOS-latest
  - macOS-10.15
  - macOS-10.14
- name: variableGroups
  type: object

jobs:
- job: nodeBuild
  displayName: 'Build ${{parameters.applicationName}}'
  pool:
    vmImage: '${{parameters.agentImage}}'
  variables:
  - '${{ each variableGroup in parameters.variableGroups }}':
    - group: ${{variableGroup}}

  steps:
  - checkout: self
  - checkout: config

  - task: NodeTool@0
    displayName: 'Install Node.js'
    inputs:
      versionSpec: '14.18.1'

  - task: Npm@1
    displayName: Npm install
    inputs:
      command: custom
      workingDir: $(Build.Repository.LocalPath)/$(Build.DefinitionName)
      verbose: true
      customCommand: install --force --json --no-package-lock
      customRegistry: useFeed
      customFeed: ${{parameters.custRegAuth}}
  
  - task: Npm@1
    displayName: Npm prune fix
    inputs:
      command: custom
      workingDir: $(Build.Repository.LocalPath)/$(Build.DefinitionName)
      verbose: false
      customCommand: install --production --json --force --no-package-lock
      customRegistry: useFeed
      customFeed: ${{parameters.custRegAuth}}

  - task: CopyFiles@2
    displayName: Copy files for staging
    inputs:
      SourceFolder: $(Build.Repository.LocalPath)/$(Build.DefinitionName)
      Contents: |
        app_data/**
        azure/**
        config/**
        node_modules/**
        src/**
        package.json
      TargetFolder: $(System.DefaultWorkingDirectory)/Publish
      CleanTargetFolder: true

  - task: CopyFiles@2
    displayName: 'Copy config for ${{parameters.environmentName}}'
    inputs:
      SourceFolder: $(System.DefaultWorkingDirectory)
      Contents: |
        $(Build.SourcesDirectory)\login.dfe.config\ssp_config\${{parameters.applicationFullName}}-standalone.json
      TargetFolder: $(System.DefaultWorkingDirectory)\Publish\config
      CleanTargetFolder: true
      flattenFolders: true
  
  - task: CopyFiles@2
    displayName: 'Copy pm2 process file'
    inputs:
      SourceFolder: $(System.DefaultWorkingDirectory)
      Contents: |
          $(Build.SourcesDirectory)\login.dfe.config\ssp_config\${{parameters.pm2ProcessFileName}}
      TargetFolder: $(System.DefaultWorkingDirectory)\Publish
      flattenFolders: true
      CleanTargetFolder: false

  - task: replacetokens@5
    displayName: 'Tokenise config & process file'
    inputs:
      rootDirectory: '$(System.DefaultWorkingDirectory)'
      targetFiles: |
        ./Publish/config/${{parameters.applicationFullName}}-standalone.json
        ./Publish/${{parameters.pm2ProcessFileName}}
      encoding: 'auto'
      tokenPattern: 'doublebraces'
      writeBOM: true
      actionOnMissing: 'fail'
      keepToken: false
      actionOnNoFiles: 'fail'
      enableTransforms: false
      enableRecursion: false
      useLegacyPattern: false
      enableTelemetry: false

  # - ${{ each folder in parameters.additionalFoldersForBuild }}:
  #   - task: CopyFiles@2
  #     displayName: 'Copy $(Build.Repository.LocalPath)/$(Build.DefinitionName)/${{folder}} to build output'
  #     inputs:
  #       SourceFolder: '$(System.DefaultWorkingDirectory)'
  #       Contents: $(Build.Repository.LocalPath)/$(Build.DefinitionName)/${{folder}}
  #       TargetFolder: '$(System.DefaultWorkingDirectory)/Publish'

  - pwsh: |
      write-host $(Build.SourcesDirectory)\login.dfe.config\ssp_config\${{parameters.applicationFullName}}-standalone.json
      Get-ChildItem $(Build.SourcesDirectory)\login.dfe.config\ssp_config\
      $fileName = "$(System.DefaultWorkingDirectory)\Publish\config\login.dfe.${{parameters.applicationFullName}}.${{parameters.environmentName}}.json"
      if (Test-Path $fileName) {
          write-host existing config found, deleting
          Remove-Item $fileName
      }
      write-host renaming pre-built config for ${{parameters.applicationFullName}} [${{parameters.environmentName}}]
      Rename-Item -path $(System.DefaultWorkingDirectory)\Publish\config\${{parameters.applicationFullName}}-standalone.json -newname $fileName
    displayName: Rename config file

  - task: ArchiveFiles@1
    displayName: Build Artifact
    inputs:
      rootFolder: $(System.DefaultWorkingDirectory)/Publish
      includeRootFolder: true
      archiveType: zip
      archiveFile: $(Build.ArtifactStagingDirectory)/${{parameters.artifactName}}.zip
      replaceExistingArchive: true

  - task: PublishPipelineArtifact@1
    displayName: Publish Pipeline Artifact
    inputs:
      targetPath: $(Build.ArtifactStagingDirectory)/${{parameters.artifactName}}.zip
      artifact: ${{parameters.artifactName}}
      publishLocation: 'pipeline'